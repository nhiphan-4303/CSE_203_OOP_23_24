/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.lab7;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hanie
 */
public class CD_Store extends javax.swing.JFrame {

    NewCDForm newCdForm = new NewCDForm();
    CD_list cdList = new CD_list();

    /**
     * Creates new form CD_Store
     */
    public CD_Store() {
        initComponents();
        setLocationRelativeTo(null);
        loadCDs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        cdTable = new javax.swing.JTable();
        sortCmb = new javax.swing.JComboBox<>();
        searchTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        newCdBtn = new javax.swing.JButton();
        restoreBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        backUpBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cdTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title ", "Collection", "Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cdTable);

        sortCmb.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sortCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Collection", "Type", "Price", " " }));
        sortCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortCmbActionPerformed(evt);
            }
        });

        searchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTxtActionPerformed(evt);
            }
        });

        searchBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        newCdBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        newCdBtn.setText("New CD");
        newCdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCdBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 81, 22, 0);
        jPanel1.add(newCdBtn, gridBagConstraints);

        restoreBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        restoreBtn.setText("Restore");
        restoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 58, 22, 0);
        jPanel1.add(restoreBtn, gridBagConstraints);

        refreshBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 63, 22, 0);
        jPanel1.add(refreshBtn, gridBagConstraints);

        backUpBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backUpBtn.setText("Back Up");
        backUpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUpBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 47, 22, 0);
        jPanel1.add(backUpBtn, gridBagConstraints);

        deleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 58, 22, 84);
        jPanel1.add(deleteBtn, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(sortCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(searchBtn)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newCdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCdBtnActionPerformed
        newCdForm.loadCDs();
        new NewCDForm().setVisible(true);
    }//GEN-LAST:event_newCdBtnActionPerformed

    private void backUpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUpBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            // Make sure to add .dat if the user hasn't added it themselves
            if (!fileToSave.getAbsolutePath().endsWith(".dat")) {
                fileToSave = new File(fileToSave + ".dat");
            }

            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileToSave))) {
                oos.writeObject(cdList.getCdList()); // Write the current CD List to the selected file
                JOptionPane.showMessageDialog(this, "Backup was successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error during backup: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_backUpBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        loadCDs();
        fillInCdTable();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed

        int row = cdTable.getSelectedRow();
        if (row >= 0) {
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this CD?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String title = (String) cdTable.getValueAt(row, 0);
                CD cd = cdList.findByTitle(title); // Find the CD by ID
                if (cd != null) {
                    cdList.getCdList().remove(cd); // Remove the CD from the list
                    ((DefaultTableModel) cdTable.getModel()).removeRow(row); // Remove the row from the table model

                    saveCDs(); // Save the updated CD list to file
                } else {
                    JOptionPane.showMessageDialog(null, "Error: CD could not be found.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a CD to delete.");
        }


    }//GEN-LAST:event_deleteBtnActionPerformed

    private void restoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose a file to restore from");

        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToLoad = fileChooser.getSelectedFile();

            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileToLoad))) {
                ArrayList<CD> restoredList = (ArrayList<CD>) ois.readObject();
                cdList.setCdList(restoredList); // Restore the CD list from the selected file
                fillInCdTable(); // Refresh the table with the loaded data
                JOptionPane.showMessageDialog(this, "Restore was successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException | ClassNotFoundException e) {
                JOptionPane.showMessageDialog(this, "Error during restore: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_restoreBtnActionPerformed

    private void searchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTxtActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // Retrieve the selected search type from the combo box
        String selectedSearchType = sortCmb.getSelectedItem().toString();

        // Retrieve the search term from the search text field
        String searchTerm = searchTxt.getText();

        // Define the ArrayList to hold the search results
        ArrayList<CD> searchResults = new ArrayList<>();

        // Use a switch statement to perform the appropriate search
        switch (selectedSearchType) {
            case "Title" ->
                searchResults = cdList.searchByTitle(searchTerm);
            case "Collection" ->
                searchResults = cdList.searchByCollection(searchTerm);
            case "Type" ->
                searchResults = cdList.seachByType(searchTerm);
            case "Price" -> {
                try {
                    double price = Double.parseDouble(searchTerm);
                    searchResults = cdList.searchByPrice(price);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid price.");
                    return;
                }
            }
            default -> {
                JOptionPane.showMessageDialog(this, "Please select a valid search type.");
                return;
            }
        }

        // Update the table with the search results
        updateCdTable(searchResults);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void sortCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortCmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortCmbActionPerformed
    private void updateCdTable(ArrayList<CD> cds) {
        DefaultTableModel model = (DefaultTableModel) cdTable.getModel();
        model.setRowCount(0); // Clear the table

        // Loop through the ArrayList and add rows to the table
        for (CD cd : cds) {
            model.addRow(new Object[]{cd.getTitle(), cd.getCollection(), cd.getType(), cd.getPrice()});
        }
    }

    private void fillInCdTable() {
        DefaultTableModel model = (DefaultTableModel) cdTable.getModel();
        int rowCount = model.getRowCount();
        // Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        // Add rows from the student list to the table model
        for (CD cd : cdList.getCdList()) {
            Object[] row = new Object[]{
                cd.getTitle(),
                cd.getCollection(),
                cd.getType(),
                cd.getPrice()
            };
            model.addRow(row);
        }
        pack();
    }

    public void saveCDs() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("CDs.dat"))) {
            oos.writeObject(cdList.getCdList()); // Save only the ArrayList<CD>
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving CDs to file: " + e.getMessage());
        }
    }

    public void loadCDs() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("CDs.dat"))) {
            cdList.setCdList((ArrayList<CD>) ois.readObject());
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error loading CDs from file.");
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backUpBtn;
    private javax.swing.JTable cdTable;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newCdBtn;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton restoreBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JComboBox<String> sortCmb;
    // End of variables declaration//GEN-END:variables
}
